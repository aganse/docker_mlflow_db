# This version hides the underlying postgres database on a backend network
# different from the frontend network on which nginx interfaces mlflow.
# And mlflow is hidden behind nginx, allowing user auth to be implemented.
# 
# The following environment vars can be set in the shell before running
# docker-compose (suggested values here but can use whatever you desire):
# export DB_NAME=mlflowdb
# export DB_USER=postgres
# export DB_PW=changethispassword!
# export DB_PORT=5432
# export MLFLOW_PORT=5000
# Those defaults are set automatically so you only need specify the ones you
# want to change - eg a new DB_PW value should be set but the rest are optional.
#
# Note an AWS S3 bucket can be used instead of local drive for the artifacts
# store, via the commented-out environment lines below.

version: '3.3'

services:
    db:
        restart: always
        image: postgres:13
        container_name: mlflow_db
        expose:
            - ${DB_PORT:-5432}
        networks:
            - backend
        environment:
            - MUID=$UID
            - MGID=$GID
            - POSTGRES_DB=${DB_NAME:-mlflowdb}
            - POSTGRES_USER=${DB_USER:-postgres}
            - POSTGRES_PASSWORD=${DB_PW:-changethispassword!}
        volumes:
            - db_datapg:/var/lib/postgresql/data

    app:
        restart: always
        build: ./mlflow
        image: mlflow_server
        container_name: mlflow_server
        expose:
            - 5001
        networks:
            - frontend
            - backend
        environment:
            - BACKEND=postgresql://${DB_USER}:${DB_PW}@db:${DB_PORT}/${DB_NAME}
            - ARTIFACTS=/mlruns
          # For artifact store in AWS S3 (note boto was installed in container):
          #  - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          #  - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          #  - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
          #  - ARTIFACTS="s3://mlflow_bucket/my_mlflow_dir/"
        volumes:
            - mlrun_data:/mlruns
            - condenv:/opt/conda
        command: 
            - sh
            - -c
            - mlflow server 
                --port 5001
                --host 0.0.0.0 
                --backend-store-uri $${BACKEND} 
                --default-artifact-root $${ARTIFACTS}
        depends_on:
            - db

    nginx:
        restart: always
        build: ./nginx
        image: mlflow_nginx
        container_name: mlflow_nginx
        ports:
            - "${MLFLOW_PORT:-5000}:80"
        networks:
            - frontend
        depends_on:
            - app

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    db_datapg:
    mlrun_data:
    condenv:
